												JENKINS_Day 02
____________________________________________________________________________________________________________________
1. Project 1 & 2
2. Poll-SCM
3. Recovering a deleted job - Backup
4. Trigger Builds Remotely
5. Throttle Builds
6. Email configuration
7. GitHub - WebHooks
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Project 1 & Project 2 ---> Build & Deployment

GitHub Repo ---> Jenkins Job (Freestyle Job) ----> App Deployment should happen in the tomcat server (in an automated way)

Jenkins ----> 8080
Tomcat ----> 8080 (Since Jenkins and tomcat are running on same instance, we need to change the port number of tomcat - 9090)


-----------------------------------------------------------------------------
Integration of Jenkins + GIT + GitHub + Maven + Tomcat 
-----------------------------------------------------------------------------
Tasks:
---------------
========
Part 1
========
1. Launch and Connect to the Instance using MobaXTerm
2. Become Root User
	sudo su
	cd (You will see only IP of Instance)
	sudo yum update -y	

========
Part 2
========
JENKINS AND JAVA INSTALLATION ON LINUX EC2 INSTANCE

3. Add Jenkins repo. to our YUM repo:
	sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
4. Import a key-file from Jenkins-CI to enable the installation from package:
	sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
	
	sudo yum upgrade

~ Installing Java
	sudo amazon-linux-extras install java-openjdk11 -y / sudo yum install java-11-amazon-corretto-devel -y


	java -version

~ Install Jenkins:
	sudo yum install jenkins -y

~ Lets start, enable, and check the status of Jenkins 
	sudo systemctl enable jenkins	
	sudo systemctl start jenkins
	sudo systemctl status jenkins
		You should see Active & Running in Green Colour, which means the Jenkins service is successfully installed

~ Check the jenkins accessibility. By default the Jenkins will run on Port No. 8080.
So, open Port No. 8080 for EC2 instance to access Jenkins
	"Check" the instance ----> Security ----> Click on the link under SGs ----> Add Rules ----> Custom TCP, 8080, Anywhere ----> Save Rules.

Open new tab: <Paste the Public IP of Instance>:8080 ----> You will see the Jenkins Home Page ----> Now we have to Unlock the Jenkins ----> You will see a code in the red colour ----> Copy the code in red colour ----> Go to MobaXTerm ----> sudo cat <paste the red color code> ----> You will see a password. Copy that password and paste in jenkins home page ----> Click on suggested plugins ----> You will see "Create First Admin User" ----> Enter Username, Password, Name, Email Id ----> Save and Continue ----> Jenkins URL:http://52.30.109.196:8080/  ----> Save and Finish ----> You will see "Jenkins is ready!" ----> Click on "Start using jenkins" ----> Now you can see the jenkins home page and here you can create Jenkins Jobs.

========
Part 3
========
TOMCAT WEBSERVER INSTALLATION ON LINUX EC2 INSTANCE

https://tomcat.apache.org/download-90.cgi ----> Downloads ----> Tomcat 9 ----> Copy the link of tar.gz file ----> https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz ----> sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz ----> ls -l ----> You will the tomcat file in red colour. This is a tar.gz file and we have to extract the tar.gz file ----> tar -xvf <enter the name of tomcat file in red colour> ----> All the files will get extracted ----> ls -l  ----> You will see the list of extracted files  ---> cd <enter the name of tomcat file in blue colour>

Lets start the tomcat server:

Inorder to start the tomcat server, we need a file called "startup.sh"
This "startup.sh" file will be there in "bin" folder ----> cd bin ----> ls -l ----> you will see startup.sh file ----> ./startup.sh ----> You will see "Tomcat Started"

Lets access the tomcat server:
Since, the tomcat also runs on Port No. 8080, we cannot access tomcat as on the same port no. jenkins is also running.
Now, we have to change the Port No. of Tomcat. (Tomcat Port No. 9090)

How to change the port no. of Tomcat?
------------------------------------------------------
In order to change the port no. of Tomcat, we will configure a file known as "server.xml" This server.xml file will be available in "conf" folder. 

cd ..  ----> pwd ----> /home/ec2-user/apache-tomcat-9.0.73 ----> ls -l ----> cd conf ----> ls -l ----> you will see server.xml file ----> vi server.xml ---->  scroll down till you see "connector port=8080" ----> press "i" ----> Change the port no to 9090 instead of 8080 ----> escape ----> :wq

Check the Tomcat accessibility. By default the Tomcat will also run on Port No. 8080. But on the same port no. jenkins is also running.
So we have to add the port no. to 9090 in ec2 instance to access Tomcat:
	"Check" the instance ----> Security ----> Click on the link under SGs ----> Add Rules ----> Custom TCP, 9090, Anwhere ----> Save Rules.
Shutdown the tomcat server ----> cd bin ----> ./shutdown.sh  ----> ./startup.sh

Open new tab: <Paste the Public IP of Instance>:9090 ----> You will see the Tomcat Home Page
Go to browser and check for tomcat accessibility. You are now able to access Tomcat and Jenkins in the same instance.

Here we can access only the Home page of Tomcat. 

Inorder to access complete tomcat server i.e Admin Dashboard, we need to do the configuration in "context.xml" file.
apache-tomcat-9.0.73/webapps/manager/META-INF/context.xml

cd apache-tomcat-9.0.73/webapps/manager/META-INF/context.xml ----> vi context.xml ----> You will see a "valve" tag. You have to edit "Allow" tag ----> ".*" />

Configuring the Users in Tomcat
---------------------------------------------
we need to edit the tomcat-users.xml to configure the users. 
The "tomcat-users.xml" file is available in "conf" folder

<role rolename="manager-gui" />
<user username="tomcat" password="tomcat" roles="manager-gui" />
<role rolename="admin-gui" />  
<user username="admin" password="admin" roles="manager-gui,admin-gui"/>

cd bin
./shutdown.sh
./startup.sh

Access Tomcat on Browser ----> Click on Server Status ----> Enter the username (admin) and password (admin)

Install git on VM
---------------------------------
Install GIT in EC2 Instance where Jenkins is running
	sudo yum install git -y

Jenkins Port No.: 8080
Tomcat Port No.: 9090

========
Part 4
========

Inorder to do the automation, Jenkins is going to execute some script to deploy the war file into the Tomcat Webserver.

___________________________________________________________
Step 1: Adding the manager-script role in tomcat-users.xml file
___________________________________________________________

In order to do the automation, Tomcat user should have a "manager-script" permission. There should be one user in the Tomcat with the "manager-script" permission. Then with that user credentials we can automate the deployment process.

Goto MobaXTerm and Connect to the Instance ----> ls -l ----> cd apache-tomcat-9.0.73 ----> ls -l ----> cd conf ----> ls -l ----> You can see tomcat-users.xml ----> vi tomcat-users.xml ----> Scroll down till you see "role rolename="manager-gui", go to the last but-one line and type the below
<role rolename="manager-script" />

Goto the last line of "user username="admin", and type manager-script at the last, just before inverted quotations ----> esc ----> :wq

___________________________________________________________
Step 2: Installing "deploy to container" plugin in Jenkins software
___________________________________________________________

Jenkins Dashboard ----> Manage Jenkins ----> Plugins ----> Available Plugins ----> In the search bar, type 'deploy to container' and check the same ----> Click on "Install without restart" ----> Click on "Go back to the top page.

___________________________________________________________________________
Step 3: Creating a Jenkins job and for that Jenkins job we will give permission to deploy
___________________________________________________________________________
Add JDK, GIT, MAVEN in Jenkins Browser Page by going into Manage Jenkins ----> System Configuration ----> Click on 'Tools'

Repo URL: 
https://github.com/KastroVKiran/maven-web-app-kastro1.git

========
Part 5
========
1) Create Jenkins Job 

		-> New Item. 
		-> Enter Item Name (Job Name) Name: git-maven-tomcat-integration
		-> Select Free Style Project & Click OK
		-> Enter some description
		-> Go to "Source Code Management" Tab and Select "Git"
		-> Enter Project "Git Repo URL" i.e  https://github.com/KastroVKiran/maven-web-app-kastro1.git
				Branch name: */main
		-> Go to "Build Triggers" tab. Here i will trigger the job manually.
		-> Go to "Build Steps" tab
			- Click on Add Build Step and Select 'Invoke Top Level Maven Targets'
		-> Select Maven and enter goals 
			- Maven Version: Maven-3.9.6
			- Goals: clean package
		-> Click on 'Post Build Action' and Select 'Deploy war/ear to container' option
		-> Give path of war file (You can give like this also : **/*.war )
		-> Enter Context Path (give project name Ex: java_web_app)
		-> Click on 'Add Container' and select Tomcat version 9.x
		-> Credentials ---> Click on "Add" ---> A dia ---> Username: admin, Password: admin, ID: Tomcat-Credentials, Description: tomcat  
			credentials ---> Add
		-> Credentials ---> Select "Tomcat-Credentials"
		-> Enter Tomact Server URL (http://ec2-vm-public-ip:tomcat-server-port)
		-> Click on Apply and Save

Note: To do any edits to the job, click on "Configure" and edit accordingly

2) Run the job now using 'Build Now' option and see 'Console Output' of job

3) Once Job Executed successfully, go to tomcat server dashboard and see application should be displayed.

4) Goto Tomcat browser and click on "maven-web-app"
	Click on the application name (it should display application)

For ex, assume that i have modified the code in github repo; does the changes gets reflected in our app? Lets see
Goto repo https://github.com/ashokitschool/maven-web-app.git ---> src/main/webapp/index.jsp ---> Change the code accordingly ---> Commit changes ---> Goto Tomcat browser and reload ---> You dont see any changes.

So what we need to do is; we need to rebuild the job ---> Goto Jenkins UI ---> Build Now ---> Goto Tomcat Browser ---> Refresh the page ---> You will see the changes.

But here there is a problem, whenever there is a code change, how DevOps engineers knows it? So, here we need to do automation in such that, whenever there is a change in the code in GitHub repo, automatically those changes should reflect in the app. Lets do that.

Jenkins UI ---> Configure ---> Build triggers ---> Poll SCM ---> Schedule: * * * * * ---> Apply ---> Save

Go to repo ---> src/main/webapp/index.jsp ---> Change the code accordingly ---> Commit changes ---> Go to Tomcat browser and reload ---> You see changes now (wait for a minute)

Go to Jenkins UI ---> You will see the next build triggered automatically.

This is called Continuous Integration and Continuous Deployment

Do again some changes in repo. and look for changes in app browser tab

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

How to get a backup and recover a deleted jenkins job?
---------------------------------------------------------------------
Dashboard ----> Manage jenkins ----> Plugins ----> Available plugins ----> Select 'ThinBackup' and install it ----> Once after installing the plugin, Goto 'Manage jenkins', scroll down to 'Tools and Actions', you can see 'ThinBackup' option ----> Click on 'ThinBackup', you can see 'Backup now', and 'restore' options ----> 

Goto Manage Jenkins ----> System ----> Scroll down to 'ThinBackup Configuration' ----> Backup directory: /var/lib/jenkins/backup ----> Backup schedule for full backups: H * * * * ----> Backup schedule for different backups: H * * * * ----> Max number of backup sets: 5 (when the 6th backup gets created, the 1st backup will get deleted) ----> Check all the options visible, provide 120 as the number under 'Force jenkins to quiet mode after specified minutes ----> Apply ----> Save

Jenkins dashboard ----> Manage jenkins ----> Scroll down to 'Tools and Actions' ----> Click on 'ThinBackup' ----> Click on 'Backup Now' ----> If you see an error message like 'A problem occured while processing the request'; execute the below commands in MobaXTerm to give necessary permissions

sudo mkdir -p /var/lib/jenkins/backup
sudo chown -R jenkins:jenkins /var/lib/jenkins/backup
sudo chmod -R 755 /var/lib/jenkins/backup

Restart the jenkins ----> sudo systemctl restart jenkins

Goto MobaXTerm ----> Goto cd /var/lib/jenkins/backup ----> ls -l ----> You can see the backup directory ----> Go inside the backup directory and click ls -l  ----> You will see all the files used for that job.

Lets see how to recover the deleted job
------------------------------------------------
Create a job ----> Build the job atleast once ----> Delete the job ----> Lets recover ----> Goto Manage Jenkins ----> scroll down to 'Tools and Actions', and click on 'ThinBackup' option ----> Click on 'Restore' ----> Select the backup directory (currently we have only one backup, so select the available backup) ----> Click on 'Restore' ----> But you will not be able to see the recoverd job. For that we have restart the jenkins

Restart the jenkins ----> sudo systemctl restart jenkins

Login into the jenkins again ----> You can see the deleted job now ----> Go inside the job, You can also see the builds also got restored

Note: Servers follow UTC (Coordinated Universal Time) Timezone


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Throttle Builds
-----------------------
To restrict the number of builds in an hour/minute/day we will use THROTTLE BUILD

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Trigger Builds Remotely
-----------------------------------------
Create a freestyle job ----> Make sure to build the job 

Goto the Job ----> Configure ----> Build Triggers ----> 'Check' Build Trigger Remotely ----> Authentication Token: <EnterAnyNameForToken> ----> Copy the URL below and paste it notepad. The URL looks like as shown below;

Syntax: JENKINS_URL/job/job1/build?token=TOKEN_NAME (or) /buildWithParameters?token=TOKEN_NAME

----> Apply ----> Save

Paste the URL in new browser and you can see Jenkins is asking for username and password. Enter username and password, and check for the build. A new build should have got executed.

Here, if i have to enter the username and password, i can directly login to the Jenkins console and i can click on build now. I dont want to enter the Jenkins creds. I want to generate an url, once i hit the url (without entering the username and password) the job should get built.

To do this we have to install a Pugin known as; "Build Authentication Token Root"
Install the above plugin

Paste the URL in browser and click enter ---> Now it will not ask the Jenkins creds ---> Goto the Jenkins console and the new build got created.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Configuration of Email in Jenkins
-----------------------------------------
Step1) Installation of 'Mailer Plugin'
Dashbboard ----> Manage Jenkins ----> Plugins ----> Available Plugins ----> Select 'Mailer Plugin' ----> Install

Step2) Email Configuration
Dashbboard ----> Manage Jenkins ----> System Configuration: System ----> Scroll down to 'E-mail notification' ----> SMTP Server ----> To setup the details for SMTP server, we will use SES service in AWS ----> Goto AWS ----> Goto SES Service ----> Click on 'Identities' (leftpane) ----> Create identity ----> Identity type: 'Check' Email address ----> Email address: <Provide email id> ----> Create identity

Goto email provided above and confirm the verification by clicking on the link received in email

Click on SMTP settings (leftpane) ----> You can see the SMTP endpoint and StartTLSPort ----> Goto the jenkins dashboard ----> SMTP Server: <Paste the SMTP Endpoint from SES Console> ----> Click on 'Advanced' ----> 'Check' Use SMTP Authentication ----> To get username and password, goto SES service ----> SMTP Settings (leftpane) ----> Click on Create SMTP Credentials ----> Username: jenkins-kastro ----> Create user ----> You can see IAM username as 'jenkins-kastro', SMTP username and SMTP password also ----> Go to the jenkins console ----> Username: <paste the username from AWS console> ----> Password: <paste the password from AWS console> ----> 'Check' use TLS ----> SMTP Port: 587 ----> Reply-to-address: <provide email id> ----> Scroll up to 'Jenkins Location' ----> System admin email address: <provide email id> ----> 'Check' Test configuration by sending test e-mail ----> Test email receipient: <Provide email id> ----> Click on 'Test configuration' to receive a test email from jenkins ----> You can see 'email was successfully sent' ----> Apply ----> Save ----> Go to email to check the test email

Step3) Email integration with job
Open any existing job ----> Configure ----> Post build actions ----> You can see the 'email notification'. Click on it. ----> Recepient: <Provide email id> ----> 'Check' send email for every unstable build, and 'Check' Send separate emails to individuals who broke the builds ----> In the build steps, add a simple shell script with some error inside the script. So that build fails, then we will get the email. ----> Apply ----> Save ----> Click on Build now ----> Make sure the build is failed ----> Goto email to check for notification.

Now correct the script in the job ----> Then click on build now ----> Once the build is success. You will get an email notification.




